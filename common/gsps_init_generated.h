// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GSPSINIT_SKYDRAGON_H_
#define FLATBUFFERS_GENERATED_GSPSINIT_SKYDRAGON_H_

#include "flatbuffers/flatbuffers.h"

namespace SkyDragon {

struct GSPSInitConfig;

struct GSPSInitConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DOWNLOAD_URL = 4,
    VT_UPDATE_ENABLE = 6,
    VT_MODE = 8
  };
  const flatbuffers::String *download_url() const { return GetPointer<const flatbuffers::String *>(VT_DOWNLOAD_URL); }
  bool update_enable() const { return GetField<uint8_t>(VT_UPDATE_ENABLE, 0) != 0; }
  const flatbuffers::String *mode() const { return GetPointer<const flatbuffers::String *>(VT_MODE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DOWNLOAD_URL) &&
           verifier.Verify(download_url()) &&
           VerifyField<uint8_t>(verifier, VT_UPDATE_ENABLE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MODE) &&
           verifier.Verify(mode()) &&
           verifier.EndTable();
  }
};

struct GSPSInitConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_download_url(flatbuffers::Offset<flatbuffers::String> download_url) { fbb_.AddOffset(GSPSInitConfig::VT_DOWNLOAD_URL, download_url); }
  void add_update_enable(bool update_enable) { fbb_.AddElement<uint8_t>(GSPSInitConfig::VT_UPDATE_ENABLE, static_cast<uint8_t>(update_enable), 0); }
  void add_mode(flatbuffers::Offset<flatbuffers::String> mode) { fbb_.AddOffset(GSPSInitConfig::VT_MODE, mode); }
  GSPSInitConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GSPSInitConfigBuilder &operator=(const GSPSInitConfigBuilder &);
  flatbuffers::Offset<GSPSInitConfig> Finish() {
    auto o = flatbuffers::Offset<GSPSInitConfig>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<GSPSInitConfig> CreateGSPSInitConfig(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> download_url = 0,
    bool update_enable = false,
    flatbuffers::Offset<flatbuffers::String> mode = 0) {
  GSPSInitConfigBuilder builder_(_fbb);
  builder_.add_mode(mode);
  builder_.add_download_url(download_url);
  builder_.add_update_enable(update_enable);
  return builder_.Finish();
}

inline flatbuffers::Offset<GSPSInitConfig> CreateGSPSInitConfigDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *download_url = nullptr,
    bool update_enable = false,
    const char *mode = nullptr) {
  return CreateGSPSInitConfig(_fbb, download_url ? _fbb.CreateString(download_url) : 0, update_enable, mode ? _fbb.CreateString(mode) : 0);
}

inline const SkyDragon::GSPSInitConfig *GetGSPSInitConfig(const void *buf) { return flatbuffers::GetRoot<SkyDragon::GSPSInitConfig>(buf); }

inline bool VerifyGSPSInitConfigBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<SkyDragon::GSPSInitConfig>(nullptr); }

inline void FinishGSPSInitConfigBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<SkyDragon::GSPSInitConfig> root) { fbb.Finish(root); }

}  // namespace SkyDragon

#endif  // FLATBUFFERS_GENERATED_GSPSINIT_SKYDRAGON_H_
